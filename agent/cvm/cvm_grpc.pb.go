// Copyright (c) Ultraviolet
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: agent/cvm/cvm.proto

package cvm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CVMService_Process_FullMethodName = "/cvm.CVMService/Process"
)

// CVMServiceClient is the client API for CVMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CVMServiceClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage], error)
}

type cVMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCVMServiceClient(cc grpc.ClientConnInterface) CVMServiceClient {
	return &cVMServiceClient{cc}
}

func (c *cVMServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CVMService_ServiceDesc.Streams[0], CVMService_Process_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientStreamMessage, ServerStreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CVMService_ProcessClient = grpc.BidiStreamingClient[ClientStreamMessage, ServerStreamMessage]

// CVMServiceServer is the server API for CVMService service.
// All implementations must embed UnimplementedCVMServiceServer
// for forward compatibility.
type CVMServiceServer interface {
	Process(grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]) error
	mustEmbedUnimplementedCVMServiceServer()
}

// UnimplementedCVMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCVMServiceServer struct{}

func (UnimplementedCVMServiceServer) Process(grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedCVMServiceServer) mustEmbedUnimplementedCVMServiceServer() {}
func (UnimplementedCVMServiceServer) testEmbeddedByValue()                    {}

// UnsafeCVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CVMServiceServer will
// result in compilation errors.
type UnsafeCVMServiceServer interface {
	mustEmbedUnimplementedCVMServiceServer()
}

func RegisterCVMServiceServer(s grpc.ServiceRegistrar, srv CVMServiceServer) {
	// If the following call pancis, it indicates UnimplementedCVMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CVMService_ServiceDesc, srv)
}

func _CVMService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CVMServiceServer).Process(&grpc.GenericServerStream[ClientStreamMessage, ServerStreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CVMService_ProcessServer = grpc.BidiStreamingServer[ClientStreamMessage, ServerStreamMessage]

// CVMService_ServiceDesc is the grpc.ServiceDesc for CVMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CVMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cvm.CVMService",
	HandlerType: (*CVMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _CVMService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent/cvm/cvm.proto",
}
